import os
import numpy as np
import torch
from torch.utils.data import DataLoader
import torchvision.transforms as transforms
from torchvision.datasets import ImageFolder
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt



from google.colab import drive
drive.mount('/content/drive')


data_dir = '/content/drive/My Drive/Colab Notebooks/archive/Garbage classification/Garbage classification'

transformations = transforms.Compose([
    transforms.Resize((256, 256)),
    transforms.ToTensor()
])


dataset = ImageFolder(data_dir, transform=transformations)


data = [sample[0].numpy() for sample in dataset]
labels = [sample[1] for sample in dataset]

data_flatten = np.array([np.ravel(sample) for sample in data])


pca = PCA(n_components=2)
data_pca = pca.fit_transform(data_flatten)

kmeans = KMeans(n_clusters=6, random_state=42)
cluster_labels = kmeans.fit_predict(data_pca)


plt.figure(figsize=(10, 6))
plt.scatter(data_pca[:, 0], data_pca[:, 1], c=cluster_labels, cmap='viridis', s=20)
plt.title('PCA with K-Means Clustering')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.colorbar(label='Cluster')
plt.grid(True)
plt.show()
